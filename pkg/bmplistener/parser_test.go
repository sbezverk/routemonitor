package bmplistener

import (
	"net"
	"testing"

	"github.com/sbezverk/routemonitor/pkg/classifier"
)

func TestParser(t *testing.T) {
	tests := []struct {
		name                 string
		input                []byte
		routeType            classifier.RouteType
		expectedPrefix       []byte
		expectedPrefixLength int
	}{
		{
			name:                 "message from vpv4 peer",
			input:                []byte{0x03, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x92, 0x01, 0x68, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x13, 0xce, 0xc0, 0xa8, 0x05, 0x04, 0x5e, 0xf1, 0x2c, 0x59, 0x00, 0x0e, 0x79, 0xb6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x96, 0x02, 0x00, 0x00, 0x00, 0x7f, 0x90, 0x0e, 0x00, 0x2d, 0x00, 0x01, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x92, 0x01, 0x68, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x78, 0x00, 0x43, 0x00, 0x00, 0x00, 0x13, 0xce, 0x00, 0x00, 0xfe, 0x0a, 0xc0, 0xa8, 0x05, 0x02, 0x40, 0x01, 0x01, 0x02, 0x40, 0x02, 0x06, 0x02, 0x01, 0x00, 0x00, 0xfd, 0xeb, 0x80, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x40, 0x05, 0x04, 0x00, 0x00, 0x00, 0x64, 0xc0, 0x10, 0x08, 0x00, 0x02, 0x00, 0x05, 0x00, 0x00, 0xfd, 0xeb, 0xc0, 0x28, 0x25, 0x05, 0x00, 0x22, 0x00, 0x01, 0x00, 0x1e, 0x00, 0x20, 0x01, 0x00, 0x00, 0x00, 0x05, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x01, 0x00, 0x06, 0x28, 0x18, 0x10, 0x00, 0x10, 0x40},
			routeType:            classifier.VPNv4,
			expectedPrefix:       net.ParseIP("192.168.5.2").To4(),
			expectedPrefixLength: 32,
		},
		{
			name:                 "message from ipv4 peer",
			input:                []byte{0x03, 0x00, 0x00, 0x00, 0x67, 0x00, 0x01, 0x00, 0x00, 0x00, 0x13, 0xce, 0x00, 0x00, 0xfe, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0d, 0x0d, 0x02, 0x00, 0x00, 0xfd, 0xeb, 0xc0, 0xa8, 0x05, 0x01, 0x5e, 0xf1, 0x2c, 0x59, 0x00, 0x0e, 0x85, 0x30, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x37, 0x02, 0x00, 0x00, 0x00, 0x1b, 0x40, 0x01, 0x01, 0x02, 0x40, 0x02, 0x06, 0x02, 0x01, 0x00, 0x00, 0xfd, 0xeb, 0x40, 0x03, 0x04, 0x0d, 0x0d, 0x0d, 0x02, 0x80, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x20, 0xc0, 0xa8, 0x05, 0x01},
			routeType:            classifier.UnicastIPv4,
			expectedPrefix:       net.ParseIP("192.168.5.2").To4(),
			expectedPrefixLength: 32,
		},
	}
	l := &listener{
		classifier: classifier.NewClassifierNLRI(),
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			l.parsingWorker(tt.input)
			l.classifier.GetAll(tt.routeType)
		})
	}
}
